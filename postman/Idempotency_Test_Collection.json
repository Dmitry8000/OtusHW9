{
	"info": {
		"_postman_id": "idempotency-test-collection",
		"name": "Idempotency Test Collection",
		"description": "Collection for testing idempotency in Order Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set baseUrl to arch.homework",
					"pm.collectionVariables.set('baseUrl', 'http://arch.homework');",
					"",
					"// Generate unique idempotency key if not set",
					"if (!pm.collectionVariables.get('idempotencyKey')) {",
					"    const key = 'test-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);",
					"    pm.collectionVariables.set('idempotencyKey', key);",
					"}"
				]
			}
		}
	],
	"item": [
		{
			"name": "Idempotency Tests",
			"item": [
				{
					"name": "Test 1: Create Order with Idempotency Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('First request should succeed', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.be.oneOf([2, 4]); // 2 = Confirmed, 4 = Failed",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"    ",
									"    // Store the response for comparison",
									"    pm.collectionVariables.set('firstResponse', JSON.stringify(responseJson));",
									"    pm.collectionVariables.set('firstOrderId', responseJson.orderId);",
									"});",
									"",
									"pm.test('Response time should be reasonable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    }\n  ],\n  \"idempotencyKey\": \"{{idempotencyKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "First request with idempotency key"
					},
					"response": []
				},
				{
					"name": "Test 2: Repeat Same Request (Idempotency Check)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Second request should return same result', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    const firstResponse = JSON.parse(pm.collectionVariables.get('firstResponse'));",
									"    ",
									"    // Compare responses",
									"    pm.expect(responseJson.orderId).to.eql(firstResponse.orderId);",
									"    pm.expect(responseJson.status).to.eql(firstResponse.status);",
									"    pm.expect(responseJson.message).to.eql(firstResponse.message);",
									"});",
									"",
									"pm.test('Response should be faster (cached)', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test('Should not create duplicate order', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.orderId).to.eql(pm.collectionVariables.get('firstOrderId'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    }\n  ],\n  \"idempotencyKey\": \"{{idempotencyKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Repeat the same request to test idempotency"
					},
					"response": []
				},
				{
					"name": "Test 3: Multiple Rapid Requests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Generate new idempotency key for this test",
									"const key = 'rapid-test-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);",
									"pm.collectionVariables.set('rapidTestKey', key);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rapid request should succeed', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.be.oneOf([2, 4]);",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"    ",
									"    // Store for comparison",
									"    pm.collectionVariables.set('rapidResponse', JSON.stringify(responseJson));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"22222222-2222-2222-2222-222222222222\",\n      \"productName\": \"Mouse\",\n      \"quantity\": 1,\n      \"price\": 25.00\n    }\n  ],\n  \"idempotencyKey\": \"{{rapidTestKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "First rapid request"
					},
					"response": []
				},
				{
					"name": "Test 4: Rapid Request Repeat 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rapid repeat 1 should return same result', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    const rapidResponse = JSON.parse(pm.collectionVariables.get('rapidResponse'));",
									"    ",
									"    pm.expect(responseJson.orderId).to.eql(rapidResponse.orderId);",
									"    pm.expect(responseJson.status).to.eql(rapidResponse.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"22222222-2222-2222-2222-222222222222\",\n      \"productName\": \"Mouse\",\n      \"quantity\": 1,\n      \"price\": 25.00\n    }\n  ],\n  \"idempotencyKey\": \"{{rapidTestKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Rapid repeat request 1"
					},
					"response": []
				},
				{
					"name": "Test 5: Rapid Request Repeat 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Rapid repeat 2 should return same result', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    const rapidResponse = JSON.parse(pm.collectionVariables.get('rapidResponse'));",
									"    ",
									"    pm.expect(responseJson.orderId).to.eql(rapidResponse.orderId);",
									"    pm.expect(responseJson.status).to.eql(rapidResponse.status);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"22222222-2222-2222-2222-222222222222\",\n      \"productName\": \"Mouse\",\n      \"quantity\": 1,\n      \"price\": 25.00\n    }\n  ],\n  \"idempotencyKey\": \"{{rapidTestKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Rapid repeat request 2"
					},
					"response": []
				},
				{
					"name": "Test 6: Different Idempotency Key (New Order)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Generate different idempotency key",
									"const key = 'different-test-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);",
									"pm.collectionVariables.set('differentKey', key);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Different key should create new order', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.be.oneOf([2, 4]);",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"    ",
									"    // This should be a different order ID",
									"    const firstOrderId = pm.collectionVariables.get('firstOrderId');",
									"    pm.expect(responseJson.orderId).to.not.eql(firstOrderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"33333333-3333-3333-3333-333333333333\",\n      \"productName\": \"Keyboard\",\n      \"quantity\": 1,\n      \"price\": 75.00\n    }\n  ],\n  \"idempotencyKey\": \"{{differentKey}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Request with different idempotency key should create new order"
					},
					"response": []
				},
				{
					"name": "Test 7: No Idempotency Key (Normal Behavior)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Request without idempotency key should work normally', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.be.oneOf([2, 4]);",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"44444444-4444-4444-4444-444444444444\",\n      \"productName\": \"Monitor\",\n      \"quantity\": 1,\n      \"price\": 300.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Request without idempotency key should work normally"
					},
					"response": []
				},
				{
					"name": "Test 8: Verify Order Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should show correct number of unique orders', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    ",
									"    // Count unique orders",
									"    const uniqueOrderIds = [...new Set(responseJson.map(order => order.id))];",
									"    pm.expect(uniqueOrderIds.length).to.be.at.least(3); // At least 3 unique orders from our tests",
									"    ",
									"    console.log('Total orders:', responseJson.length);",
									"    console.log('Unique orders:', uniqueOrderIds.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Get all orders to verify no duplicates were created"
					},
					"response": []
				}
			],
			"description": "Tests for idempotency functionality"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework",
			"type": "string"
		},
		{
			"key": "idempotencyKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "rapidTestKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "differentKey",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstResponse",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstOrderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "rapidResponse",
			"value": "",
			"type": "string"
		}
	]
}


