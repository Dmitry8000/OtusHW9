{
	"info": {
		"_postman_id": "saga-demo-collection",
		"name": "Saga Demo Collection",
		"description": "Collection for testing distributed transactions using Saga pattern",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set baseUrl to arch.homework:80",
					"pm.collectionVariables.set('baseUrl', 'http://arch.homework:80');"
				]
			}
		}
	],
	"item": [
		{
			"name": "Order Service",
			"item": [
				{
					"name": "Create Order - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order should be created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(2); // 2 = Confirmed",
									"    pm.expect(responseJson.message).to.include('successfully');",
									"});",
									"",
									"pm.test('Order ID should be present', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"    pm.collectionVariables.set('orderId', responseJson.orderId);",
									"});",
									"",
									"pm.test('Response time should be reasonable', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    },\n    {\n      \"productId\": \"22222222-2222-2222-2222-222222222222\",\n      \"productName\": \"Mouse\",\n      \"quantity\": 2,\n      \"price\": 25.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Create a new order with valid items"
					},
					"response": []
				},
				{
					"name": "Create Order - Insufficient Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order should fail due to insufficient inventory', function () {",
									"    pm.response.to.have.status(400);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.eql(4); // 4 = Failed",
									"    pm.expect(responseJson.message).to.include('failed');",
									"});",
									"",
									"pm.test('Order ID should be present even for failed orders', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"    pm.collectionVariables.set('failedOrderId', responseJson.orderId);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 100,\n      \"price\": 1000.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Try to create order with insufficient inventory to test rollback"
					},
					"response": []
				},
				{
					"name": "Create Order - Payment Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order should handle payment failure scenario', function () {",
									"    // Payment failure is simulated randomly, so we accept both success and failure",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.be.oneOf([2, 4]); // 2 = Confirmed, 4 = Failed",
									"});",
									"",
									"pm.test('Order ID should be present even for failed orders', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"99999999-9999-9999-9999-999999999999\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Try to create order with customer ID that will cause payment failure (simulated)"
					},
					"response": []
				},
				{
					"name": "Create Order - Delivery Failure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Order should handle delivery failure scenario', function () {",
									"    // Delivery failure is simulated randomly, so we accept both success and failure",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.status).to.be.oneOf([2, 4]); // 2 = Confirmed, 4 = Failed",
									"});",
									"",
									"pm.test('Order ID should be present even for failed orders', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.orderId).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerId\": \"88888888-8888-8888-8888-888888888888\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Try to create order that will cause delivery failure (simulated)"
					},
					"response": []
				},
				{
					"name": "Get Order",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/order/api/order/{{orderId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order",
								"{{orderId}}"
							]
						},
						"description": "Get order by ID"
					},
					"response": []
				},
				{
					"name": "Get All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return list of orders', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/order/api/order",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"order",
								"api",
								"order"
							]
						},
						"description": "Get all orders"
					},
					"response": []
				},
				{
					"name": "Verify Saga Compensation - Check Payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should show refunded payments for failed orders', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    ",
									"    // Check if there are any refunded payments",
									"    const refundedPayments = responseJson.filter(p => p.status === 'Refunded');",
									"    pm.expect(refundedPayments.length).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/api/billing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"billing"
							]
						},
						"description": "Check payments to verify compensation (refunds) for failed orders"
					},
					"response": []
				},
				{
					"name": "Verify Saga Compensation - Check Inventory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should show released reservations for failed orders', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    ",
									"    // Check if there are any released reservations",
									"    const releasedReservations = responseJson.filter(r => r.status === 'Released');",
									"    pm.expect(releasedReservations.length).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/inventory/api/inventory/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"api",
								"inventory",
								"reservations"
							]
						},
						"description": "Check inventory reservations to verify compensation (releases) for failed orders"
					},
					"response": []
				},
				{
					"name": "Verify Saga Compensation - Check Delivery",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should show cancelled deliveries for failed orders', function () {",
									"    pm.response.to.have.status(200);",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson).to.be.an('array');",
									"    ",
									"    // Check if there are any cancelled deliveries",
									"    const cancelledDeliveries = responseJson.filter(d => d.status === 'Cancelled');",
									"    pm.expect(cancelledDeliveries.length).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/delivery/api/delivery/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delivery",
								"api",
								"delivery",
								"reservations"
							]
						},
						"description": "Check delivery reservations to verify compensation (cancellations) for failed orders"
					},
					"response": []
				}
			],
			"description": "Order Service endpoints"
		},
		{
			"name": "Billing Service",
			"item": [
				{
					"name": "Process Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"12345678-1234-1234-1234-123456789012\",\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"amount\": 1050.00\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/billing/api/billing/processpayment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"billing",
								"processpayment"
							]
						},
						"description": "Process payment for an order"
					},
					"response": []
				},
				{
					"name": "Refund Payment",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"12345678-1234-1234-1234-123456789012\",\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"amount\": 1050.00\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/billing/api/billing/refundpayment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"billing",
								"refundpayment"
							]
						},
						"description": "Refund payment for an order"
					},
					"response": []
				},
				{
					"name": "Get All Payments",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/billing/api/billing",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"billing",
								"api",
								"billing"
							]
						},
						"description": "Get all payments"
					},
					"response": []
				}
			],
			"description": "Billing Service endpoints"
		},
		{
			"name": "Inventory Service",
			"item": [
				{
					"name": "Reserve Items",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    },\n    {\n      \"productId\": \"22222222-2222-2222-2222-222222222222\",\n      \"productName\": \"Mouse\",\n      \"quantity\": 2,\n      \"price\": 25.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory/api/inventory/reserveitems",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"api",
								"inventory",
								"reserveitems"
							]
						},
						"description": "Reserve items for an order"
					},
					"response": []
				},
				{
					"name": "Release Reservation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"12345678-1234-1234-1234-123456789012\",\n  \"items\": [\n    {\n      \"productId\": \"11111111-1111-1111-1111-111111111111\",\n      \"productName\": \"Laptop\",\n      \"quantity\": 1,\n      \"price\": 1000.00\n    },\n    {\n      \"productId\": \"22222222-2222-2222-2222-222222222222\",\n      \"productName\": \"Mouse\",\n      \"quantity\": 2,\n      \"price\": 25.00\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/inventory/api/inventory/releasereservation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"api",
								"inventory",
								"releasereservation"
							]
						},
						"description": "Release reservation for an order"
					},
					"response": []
				},
				{
					"name": "Get Inventory",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/inventory/api/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"api",
								"inventory"
							]
						},
						"description": "Get current inventory status"
					},
					"response": []
				},
				{
					"name": "Get Reservations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/inventory/api/inventory/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"inventory",
								"api",
								"inventory",
								"reservations"
							]
						},
						"description": "Get all reservations"
					},
					"response": []
				}
			],
			"description": "Inventory Service endpoints"
		},
		{
			"name": "Delivery Service",
			"item": [
				{
					"name": "Reserve Delivery",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"12345678-1234-1234-1234-123456789012\",\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\",\n  \"preferredDeliveryTime\": \"2024-01-15T10:00:00Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/delivery/api/delivery/reservedelivery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delivery",
								"api",
								"delivery",
								"reservedelivery"
							]
						},
						"description": "Reserve delivery slot for an order"
					},
					"response": []
				},
				{
					"name": "Cancel Delivery",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"orderId\": \"12345678-1234-1234-1234-123456789012\",\n  \"customerId\": \"12345678-1234-1234-1234-123456789012\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/delivery/api/delivery/canceldelivery",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delivery",
								"api",
								"delivery",
								"canceldelivery"
							]
						},
						"description": "Cancel delivery reservation for an order"
					},
					"response": []
				},
				{
					"name": "Get Delivery Slots",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/delivery/api/delivery/slots",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delivery",
								"api",
								"delivery",
								"slots"
							]
						},
						"description": "Get available delivery slots"
					},
					"response": []
				},
				{
					"name": "Get Reservations",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/delivery/api/delivery/reservations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"delivery",
								"api",
								"delivery",
								"reservations"
							]
						},
						"description": "Get all delivery reservations"
					},
					"response": []
				}
			],
			"description": "Delivery Service endpoints"
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework:80",
			"type": "string"
		},
		{
			"key": "orderId",
			"value": "",
			"type": "string"
		},
		{
			"key": "failedOrderId",
			"value": "",
			"type": "string"
		}
	]
}
